# This Makefile is included by individual tests.
#
# README: Variables that you might care about. Most of these can be
# overridden, which eliminates the variables they are derived from as
# being important. Unfortunately, I don't know how to break make
# functions across multiple lines, so run_fn is completely illegible.
#
# SOURCES - source files to build
# TARGET - name of executable
# RUN - command to run after building; derived from BUILD_MODE, MODE, EXEC, PROCS, and SIM_FLAGS
#
# PROCS - number of processes
# CORES - number of cores
# ENABLE_SM - enable shared memory (true/false)
# APP_FLAGS - flags to pass to the application
# BUILD_MODE - set to build to not run anything
# MODE - set to 'pin' to use pin, set to '' for running application standalone
# CONFIG_FILE - configuration file to use to run the Graphite simulator
# OUTPUT_DIR - directory to write the simulation output
# APP_SPECIFIC_CXX_FLAGS - application-specific CXX flags (e.g., include paths)
# SIM_FLAGS - config flags passed to the simulator. Derived from CORES, PROCS. See sim_flags_fn.
# EXEC - command to run; derived from TARGET and APP_FLAGS

SIM_ROOT ?= $(CURDIR)/../../..

# Run options
include $(SIM_ROOT)/Makefile.config

# Debug Graphite or the application or nothing
# Set to 'graphite' for debugging Graphite, 'app' for debugging the application, 'none' for debugging nothing
DEBUG ?= none

# Set to 'build' to just build the application and not run anything
BUILD_MODE ?=
# Set to 'pin' to use Pin while running the application, '' for just running the application standalone
MODE ?= pin

# What configuration file to use when running Graphite?
C ?= carbon_sim.cfg
CONFIG_FILE ?= ${C}
# Which output dir to put the results in?
# The default output dir corresponds to the date and time when the simulation was started

O ?= $(shell date +%Y-%m-%d_%H-%M-%S)
OUTPUT_DIR ?= $(O)

# The following variables can be used to override the default parameters in the configuration file.
# They can be set from individual test Makefiles or from the command line
# Number of target cores to be used in the simulation
# CORES ?= 64
# Number of host processes
# PROCS ?= 1
# Is shared memory modeling enabled?
# ENABLE_SM ?= true
# Flags to be passed to the application
# APP_FLAGS ?=
# Which clock skew management scheme to use? Valid values are 'lax', 'lax_p2p' or 'lax_barrier'
# CLOCK_SKEW_MANAGEMENT_SCHEME ?= lax_barrier

VALGRIND = # valgrind --leak-check=yes

ifeq ($(DEBUG),graphite)
	PIN_DEBUG_FLAGS = -pause_tool 10
else
ifeq ($(DEBUG),app)
	PIN_DEBUG_FLAGS = -appdebug
endif
endif

PIN_BIN = $(PIN_HOME)/intel64/bin/pinbin
PIN_TOOL = $(SIM_ROOT)/lib/pin_sim
PIN_RUN = $(PIN_BIN) $(PIN_DEBUG_FLAGS) -injection child -tool_exit_timeout 1 -mt -t $(PIN_TOOL)

CONFIG_FILE_ABS_PATH := $(SIM_ROOT)/$(CONFIG_FILE)
OUTPUT_DIR_ABS_PATH := $(SIM_ROOT)/results/$(OUTPUT_DIR)
APP_SPECIFIC_CXX_FLAGS ?= 

# Use: $(call sim_flags_fn, $(1-CORES), $(2-PROCS), $(3-ENABLE_SM), $(4-OUTPUT_DIR_ABS_PATH),$(CLOCK_SKEW_MANAGEMENT_SCHEME))
sim_flags_fn = -c $(CONFIG_FILE_ABS_PATH)
ifdef CORES
	sim_flags_fn += --general/total_cores=$(1)
endif
ifdef PROCS
	sim_flags_fn += --general/num_processes=$(2)
endif
ifdef ENABLE_SM
	sim_flags_fn += --general/enable_shared_mem=$(3)
endif
ifdef OUTPUT_DIR
	sim_flags_fn += --general/output_dir=$(4)
endif
ifdef CLOCK_SKEW_MANAGEMENT_SCHEME
	sim_flags_fn += --clock_skew_management/scheme=$(5)
endif
SIM_FLAGS ?= $(call sim_flags_fn,$(CORES),$(PROCS),$(ENABLE_SM),$(OUTPUT_DIR_ABS_PATH),$(CLOCK_SKEW_MANAGEMENT_SCHEME))

EXEC ?= $(CURDIR)/$(TARGET) $(APP_FLAGS) # command thats actually executed
launch_fn = python -u $(SIM_ROOT)/tools/spawn_master.py

# Use: $(call run_fn, $(1-MODE), $(2-EXEC), $(3-SIM_FLAGS))
run_fn = $(if $(findstring build,$(BUILD_MODE)), ,$(if $(findstring pin,$(1)),$(call launch_fn) $(PIN_RUN) $(3) -- $(2),$(call launch_fn) $(VALGRIND) $(2) $(3)))
RUN ?= cd $(SIM_ROOT) ; $(call run_fn,$(MODE),$(EXEC),$(SIM_FLAGS))

# Build targets
all: $(TARGET)
	$(RUN)

# Compiler flags
LD_FLAGS += -static -u CarbonStartSim -u CarbonStopSim -u pthread_create -u pthread_join
# Math, pthread libraries
LD_LIBS += -lm -pthread

OBJECTS ?= $(patsubst %.cpp,%.o,$(patsubst %.c,%.o,$(patsubst %.cc,%.o,$(SOURCES) ) ) )

CLEAN=$(findstring clean,$(MAKECMDGOALS))
ifeq ($(CLEAN),)
include $(SIM_ROOT)/common/Makefile.common
include $(SIM_ROOT)/contrib/Makefile.common
endif

CXXFLAGS = $(DBG_FLAGS) $(OPT_FLAGS) -Wall $(APP_SPECIFIC_CXX_FLAGS) -I$(SIM_ROOT)/common/user -I$(SIM_ROOT)/common/misc
CFLAGS = $(CXXFLAGS) -std=c99

# Rules
CARBON_LIB = $(SIM_ROOT)/lib/libcarbon_sim.a
PIN_SIM_LIB = $(SIM_ROOT)/lib/pin_sim.so

.PHONY: $(TARGET)

# We basically want to try re-making libcarbon_sim.a and pin_sim.so
# and then /if that produces a new library/ recompile the test. There
# is probably some 'correct' way to do this in a makefile that doesn't
# always rebuild the test, but I don't know what it is. (The problem
# is we don't want to include all the dependencies for the libraries
# in this makefile.)
#
# Also, we force recompilation if any of the test object files are
# newer than the target. (Make does this as well but we override it
#  with our if-statement.)
$(TARGET): $(OBJECTS) 
	make -C $(SIM_ROOT)/common
	make -C $(SIM_ROOT)/contrib
	$(if $(findstring pin,$(MODE)),make -C $(SIM_ROOT)/pin)
	if $(foreach source,$(OBJECTS),[ ! -e $(TARGET) ] || [ $(source) -nt $(TARGET) ] ||) [ $(CARBON_LIB) -nt $(TARGET) ] || [ $(PIN_SIM_LIB) -nt $(TARGET) ]; \
   then $(CXX) $^ -o $@ $(DBG_FLAGS) $(OPT_FLAGS) $(LD_FLAGS) $(LD_LIBS); \
	fi

ifeq ($(CLEAN),)
-include $(OBJECTS:%.o=%.d)
endif

ifneq ($(CLEAN),)
clean:
	$(RM) *.o *.d $(TARGET)
endif
